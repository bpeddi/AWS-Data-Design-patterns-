---
AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: >-
  Redshift stored procedure invocation  using Data API and Event Bridge

Parameters:
  StackPrefix:
    Description: >-
          Stack prefix
    Type: String
    Default: "RedshiftDataApi"

  DynamoDbBillingMode:
    Description: >-
      Specify how you are charged for read and write throughput and how you manage capacity.
    Type: String
    Default: PAY_PER_REQUEST
    AllowedValues:
      - PROVISIONED
      - PAY_PER_REQUEST

  DynamoDbPointInTimeRecovery:
    Description: >-
      Enable point in time recovery DynamoDB table backups
    Type: String
    Default: true
    AllowedValues:
      - false
      - true
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: >-
      Provide IDs of existing Private Subnets (comma separated) in a
      existing VPC to which the Lambda function will be deployed.
  SecGroup:
    Type: String
    Description: Security Group For outgoing Lambda
  DbSecretArn:
    Type: String
    Description: Redshift ARN
    Default: "redshifttest-nsc-test-Redshift-nsc-redshift-cluster-credentials"
  RedshiftDbName:
    Type: String
    Description: Redshift DB name
  ClusterIdentifier:
    Type: String
    Description: Redshift IAM role
  DynamodbMetaTable:
    Type: String
    Description: Metadata table to track the Dyanmodb
    Default: "redshift-StoredProc-meta"
  SupportNotificationEmail:
    Type: String
    Description: Email address to send Stepfunction failure notifications
    Default: peddibp@amazon.com
  REGION:
    Type: String
    Description: AWS Region
    Default: us-west-1


##########################################################################
# SAM Globals
##########################################################################
Globals:
  Function:
    Runtime: python3.8


Resources:
##########################################################################
# DynamoDb Table to store Step function Tocken
##########################################################################
  DynamoDbTableMeta:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamodbMetaTable
      AttributeDefinitions:
        # primary key attributes
        - AttributeName: statementName
          AttributeType: S
      KeySchema:
        - AttributeName: statementName
          KeyType: HASH
      BillingMode: !Ref DynamoDbBillingMode
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !Ref DynamoDbPointInTimeRecovery
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-table"
        - Key: Service
          Value: "AWS"

##########################################################################
# Lambda Layers
##########################################################################

  # https://aws-data-wrangler.readthedocs.io/en/stable/index.html
  AwsDataWranglerLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: makefile
    Properties:
      Description: >-
        AWS Data Wrangler Layer
      ContentUri: src/lambda_layers/aws-data-wrangler
      CompatibleRuntimes:
        - python3.8

  # https://awslabs.github.io/aws-lambda-powertools-python/
  AwsLambdaPowertoolsPythonLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: python3.8
    Properties:
      Description: >-
        AWS Lambda Power Tools Python
      ContentUri: ./src/lambda_layers/aws-lambda-power-tools
      CompatibleRuntimes:
        - python3.8

###### This Lambda function submits stored procedure to redshift using Redshift Data API

  RedshiftRunSpsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/lambda_functions/run_redshift_sp
      Description: >-
       This function calls redshift data API to submit stored procedure
      Handler: app.lambda_handler
      Layers:
        - !Ref AwsDataWranglerLayer
        - !Ref AwsLambdaPowertoolsPythonLayer
      MemorySize: 2048
      # policy templates:
      # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamodbMetaTable
        - AmazonRedshiftDataFullAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref DbSecretArn
      Timeout: 900
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecGroup
        SubnetIds: !Ref SubnetIds
      Environment:
        Variables:
          DBSECRETARN: !Ref DbSecretArn
          REDSHIFT_DB_NAME: !Ref RedshiftDbName
          CLUSTER_IDENTIFIER: !Ref ClusterIdentifier
          DYNAMODB_META_TABLE_NAME: !Ref DynamodbMetaTable
          LOG_LEVEL: INFO
          REGION: !Ref REGION

###### This Lambda function called by Event Bridge with status of redshift stored procedure invocation.
  StepFunctionCallBack:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/lambda_functions/callback_step_function
      Description: >-
        Send Tocken to Step function call back
      Handler: app.lambda_handler
      Layers:
        - !Ref AwsDataWranglerLayer
        - !Ref AwsLambdaPowertoolsPythonLayer
      MemorySize: 4024
      # policy templates:
      # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamodbMetaTable
        - AWSStepFunctionsFullAccess
        - AmazonRedshiftDataFullAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref DbSecretArn
      Timeout: 900
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecGroup
        SubnetIds: !Ref SubnetIds
      Environment:
        Variables:
          DYNAMODB_META_TABLE_NAME: !Ref DynamodbMetaTable
          LOG_LEVEL: INFO

  #######################################################
  ##Event Bridge event looking for redshift events with statementName = "redshift-storedproc-event-|"
  ########################################################

  EventBridgeRedshiftEventRule:
    Type: "AWS::Events::Rule"
    Description: redshift event capture rule
    Properties:
      EventPattern: "{ \"source\": [\"aws.redshift-data\"],\"detail-type\": [\"Redshift Data Statement Status Change\"],\"detail\": {\"statementName\": [{\"prefix\": \"redshift-storedproc-event-\"}]}}"
      Description: Respond to Redshift-data events
      State: "ENABLED"
      Targets:
          -
            Arn: !GetAtt 'StepFunctionCallBack.Arn'
            Id: EventBridgeRedshiftEventRule

  PermissionForRedshiftEventToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: "StepFunctionCallBack"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "EventBridgeRedshiftEventRule"
          - "Arn"


  ##########################################################################
  # Step Functions
  #
  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-step-functions-in-sam.html
  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
  ##########################################################################
  RedshiftDataApiSPProcesStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: ./src/state_machines/state_machine.asl.json
      # NOTE DefinitionSubstitutions only supports string substitutions
      # so numeric values don't work
      DefinitionSubstitutions:
        RedshiftRunSpsFunction: !GetAtt RedshiftRunSpsFunction.Arn
        FailureProcessSNSTopic: !Ref FailureProcessSNSTopic
      # policy templates:
      # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref RedshiftRunSpsFunction
        - SNSPublishMessagePolicy:
            TopicName: !Ref FailureProcessSNSTopic

  FailureProcessSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub "GlueEtl-Notification-Topic-${AWS::StackName}"
      KmsMasterKeyId: alias/aws/sns
      Subscription:
        - Endpoint: !Ref SupportNotificationEmail
          Protocol: email
      Tags:
        - Key: Name
          Value:
            !Sub "DLQProcess job failure notification for stack: ${AWS::StackName}"

  DQLProcessFailureSnsTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sns:Publish
            Resource: '*'
      Topics:
        - !Ref FailureProcessSNSTopic


Outputs:

  RedshiftRunSpsFunction:
    Description: >-
      ARN of the RedshiftRunSpsFunction Process
    Value: !GetAtt RedshiftRunSpsFunction.Arn

  StepFunctionCallBack:
    Description: >-
      ARN of the StepFunctionCallBack Lambda
    Value: !GetAtt StepFunctionCallBack.Arn

  RedshiftDataApiSPProcesStateMachineArn:
    Description: >-
      ARN of the RedshiftDataApiSPProcesStateMachineArn Process
    Value: !GetAtt RedshiftDataApiSPProcesStateMachine.Arn